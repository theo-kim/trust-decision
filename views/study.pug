extends layout

//- Mixins:

//- Filter Entry Mixin
mixin filter(name, id)
	- var val = social[round][id]
	-
		var percentColors = [
			{ pct: 0.0, color: { r: 0xdd, g: 0xed, b: 0xff } },
			{ pct: 1.0, color: { r: 0x01, g: 0x2d, b: 0x6f } } ];
		function getColorForPercentage(pct) {
			for (var i = 1; i < percentColors.length - 1; i++) {
				if (pct < percentColors[i].pct) {
					break;
				}
			}
			var lower = percentColors[i - 1];
			var upper = percentColors[i];
			var range = upper.pct - lower.pct;
			var rangePct = (pct - lower.pct) / range;
			var pctLower = 1 - rangePct;
			var pctUpper = rangePct;
			var color = {
				r: Math.floor(lower.color.r * pctLower + upper.color.r * pctUpper),
				g: Math.floor(lower.color.g * pctLower + upper.color.g * pctUpper),
				b: Math.floor(lower.color.b * pctLower + upper.color.b * pctUpper)
			};
			return 'rgb(' + [color.r, color.g, color.b].join(',') + ')';
		}

	case rand
		when 2
			input(type="checkbox",id=id,style="margin-right:5px;",data-toggle="tooltip", title=val+"% chose this option", data-placement="top", onchange="filter(this, '" + id + "')", autocomplete="off")
			label(for=id, style="font-weight:bold;font-size:18px;color:"+getColorForPercentage(val / social[round]["filter-max"]), data-placement="right")= name
		when 1
			input(type="checkbox",id=id,style="margin-right:5px;",data-toggle="tooltip", title=val+"% chose this option", data-placement="top", onchange="filter(this, '" + id + "')", autocomplete="off")
			label(for=id, style="font-weight:bold;font-size:18px;", data-toggle="tooltip", title=val+"% chose to filter this category", data-placement="right")= name
		default
			input(type="checkbox",id=id,style="margin-right:5px;",autocomplete="off", onchange="filter(this, '" + id + "')")
			label(for=id, style="font-weight:bold;font-size:18px;")= name
	br

//- Table Row Mixin
mixin row(index, type, fee, price, return1, return5, name)
	//- Generate new id for the fund
	-
		function newfundname() {
			var ary = ['A','W','B','T','Y','N','C','D','E','F','G','H','M','S','L','R','U'];
			var name = ary[Math.floor(Math.random() * ary.length)]+ary[Math.floor(Math.random() * ary.length)]+Math.floor(Math.random() * 9)+Math.floor(Math.random() * 9)+Math.floor(Math.random() * 9)+Math.floor(Math.random() * 9);
			return name;
		}
	tr
		td= newfundname()
		td= type 
		td(style="text-align:center;")= fee
		td(style="text-align:center;")= '$' + price
		td(style="text-align:center;")= return1
			| %
		td(style="text-align:center;")= return5
			| %
		td 
			input.allocation(placeholder="0%", type="text", min="0", max="100", onchange="updateVal(this)", oninput="this.value = this.value.replace(/[^0-9.]/g, '');", autocomplete="off", data-extra=index, data-return=return1, style="text-align:center;")
		//- if (rand == 3)
		//-	td(style="text-align:center")=(marketvalues[round - 1][name] || "")

//- Table sort head function mixin
mixin sortButtons(target)
	- var val = social[round][target]
	-
		var percentColors = [
			{ pct: 0.0, color: { r: 0xdd, g: 0xed, b: 0xff } },
			{ pct: 1.0, color: { r: 0x01, g: 0x2d, b: 0x6f } } ];
		function getColorForPercentage(pct) {
			for (var i = 1; i < percentColors.length - 1; i++) {
				if (pct < percentColors[i].pct) {
					break;
				}
			}
			var lower = percentColors[i - 1];
			var upper = percentColors[i];
			var range = upper.pct - lower.pct;
			var rangePct = (pct - lower.pct) / range;
			var pctLower = 1 - rangePct;
			var pctUpper = rangePct;
			var color = {
				r: Math.floor(lower.color.r * pctLower + upper.color.r * pctUpper),
				g: Math.floor(lower.color.g * pctLower + upper.color.g * pctUpper),
				b: Math.floor(lower.color.b * pctLower + upper.color.b * pctUpper)
			};
			return 'rgb(' + [color.r, color.g, color.b].join(',') + ')';
		}

	case rand
		when 3
			span.glyphicon.glyphicon-chevron-up.sort-button(style="margin-left:5px;margin-right:1px;color:" + getColorForPercentage(val / social[round]["sort-max"]), onclick="sortAsc('" + target + "')", data-toggle="tooltip", title=val+"% chose to sort this column", data-placement="left")
			span.glyphicon.glyphicon-chevron-down.sort-button(onclick="sortDesc('" + target + "')", style="color:" + getColorForPercentage(val / social[round]["sort-max"]), data-toggle="tooltip", title=val+"% of study participants chose to sort this column", data-placement="right")
		when 2
			span.glyphicon.glyphicon-chevron-up.sort-button(style="margin-left:5px;margin-right:1px;color:" + getColorForPercentage(val / social[round]["sort-max"]), onclick="sortAsc('" + target + "')")
			span.glyphicon.glyphicon-chevron-down.sort-button(onclick="sortDesc('" + target + "')",data-placement="right", style="color:" + getColorForPercentage(val / social[round]["sort-max"]))
		when 1
			span.glyphicon.glyphicon-chevron-up.sort-button(style="margin-left:5px;margin-right:1px;", onclick="sortAsc('" + target + "')", data-toggle="tooltip", title=val+"% chose to sort this column", data-placement="left")
			span.glyphicon.glyphicon-chevron-down.sort-button(onclick="sortDesc('" + target + "')", data-toggle="tooltip", title=val+"% of study participants chose to sort this column", data-placement="right")
		default
			span.glyphicon.glyphicon-chevron-up.sort-button(style="margin-left:5px;margin-right:1px;", onclick="sortAsc('" + target + "')")
			span.glyphicon.glyphicon-chevron-down.sort-button(onclick="sortDesc('" + target + "')")


//- Main content
block content
	div#filter
		h3 
			b Filters
		h4 Asset Type:
		+filter('Stock', 'stock')
		+filter('Bond', 'bond')
		+filter('Money Market', 'money-market')
		+filter('Balanced', 'balanced')
		+filter('International', 'international')
		h4 Index or Actively Managed:
		+filter('Index', 'index')
		+filter('Actively Managed', 'active')
		h4 Annual Fee:
		+filter('Above 0.3%', 'above')
		+filter('0.1% - 0.3%', 'between')
		+filter('Below 0.1%', 'below')
	div#study
		h1 
			b Round #{round}
		- var s = rand == 2
		- var sd = rand == 1 
		h4 
			- if (round > 1)
				b Your return last round was #{retur}%
		h4=text
		case s
			when true
				div(style="width:300px;position:relative;font-size:16px;")
					img(src="/images/scale.png", style="width:100%;height: 20px;")
					span(style="display:block;position:absolute;top:20px;left:0;") 0%
					case rand
						when 1
							span(style="display:block;position:absolute;top:20px;left:50%;transform:translateX(-50%)")= social[round]["filter-max"] / 2 + "%"
							span(style="display:block;position:absolute;top:20px;right:0;")= social[round]["filter-max"] + "%"
						when 2
							span(style="display:block;position:absolute;top:20px;left:50%;transform:translateX(-50%)")= social[round]["sort-max"] / 2 + "%"
							span(style="display:block;position:absolute;top:20px;right:0;")= social[round]["sort-max"] + "%"
		button#next.good.no-anim Continue to next round
			span#butt-back
		table#data
			thead
				tr
					th Funds
					th Category
					th Annual Fee
					th Price
					th Average annual return: 1 year
					th Average annual return: 5 years
					th Allocation
					//- if (rand == 3)
					//- th="Percents allocated by other participants (on average)"
				tr#sub
					th
					th 
						+sortButtons("category")
					th 
						+sortButtons("fee")
					th
						+sortButtons("price")
					th(style="text-align:center;")
						+sortButtons("first-year")
					th
						+sortButtons("fifth-year")
					th
					//- if (rand == 3)
					//- th
			tbody
				each val, index in data[round]
					+row(index, val.category, val.fee, val.price.slice(1, -1), val.oneYear.slice(1, -1), val.fiveYear, val.name)
				
	script.
		var rand = #{rand};
		var test = #{test};
		var user = #{user};
		var dt = new Date();
		var start = dt.toUTCString();
	script(src="/javascripts/study.js")